// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sergio.roo.jsf.jsf;

import com.sergio.roo.jsf.dominio.Donante;
import com.sergio.roo.jsf.dominio.GrupoSanguineo;
import com.sergio.roo.jsf.dominio.Organo;
import com.sergio.roo.jsf.jsf.DonanteBean;
import com.sergio.roo.jsf.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.RegexValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect DonanteBean_Roo_ManagedBean {
    
    declare @type: DonanteBean: @ManagedBean(name = "donanteBean");
    
    declare @type: DonanteBean: @SessionScoped;
    
    private String DonanteBean.name = "Donantes";
    
    private Donante DonanteBean.donante;
    
    private List<Donante> DonanteBean.allDonantes;
    
    private boolean DonanteBean.dataVisible = false;
    
    private List<String> DonanteBean.columns;
    
    private HtmlPanelGrid DonanteBean.createPanelGrid;
    
    private HtmlPanelGrid DonanteBean.editPanelGrid;
    
    private HtmlPanelGrid DonanteBean.viewPanelGrid;
    
    private boolean DonanteBean.createDialogVisible = false;
    
    private List<Organo> DonanteBean.selectedOrganos;
    
    @PostConstruct
    public void DonanteBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("fechaNacimiento");
        columns.add("mail");
    }
    
    public String DonanteBean.getName() {
        return name;
    }
    
    public List<String> DonanteBean.getColumns() {
        return columns;
    }
    
    public List<Donante> DonanteBean.getAllDonantes() {
        return allDonantes;
    }
    
    public void DonanteBean.setAllDonantes(List<Donante> allDonantes) {
        this.allDonantes = allDonantes;
    }
    
    public String DonanteBean.findAllDonantes() {
        allDonantes = Donante.findAllDonantes();
        dataVisible = !allDonantes.isEmpty();
        return null;
    }
    
    public boolean DonanteBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DonanteBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DonanteBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DonanteBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DonanteBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DonanteBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreCreateOutput.setFor("nombreCreateInput");
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMaximum(25);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        OutputLabel grupoSanguineoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        grupoSanguineoCreateOutput.setFor("grupoSanguineoCreateInput");
        grupoSanguineoCreateOutput.setId("grupoSanguineoCreateOutput");
        grupoSanguineoCreateOutput.setValue("Grupo Sanguineo:");
        htmlPanelGrid.getChildren().add(grupoSanguineoCreateOutput);
        
        AutoComplete grupoSanguineoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        grupoSanguineoCreateInput.setId("grupoSanguineoCreateInput");
        grupoSanguineoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.grupoSanguineo}", GrupoSanguineo.class));
        grupoSanguineoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{donanteBean.completeGrupoSanguineo}", List.class, new Class[] { String.class }));
        grupoSanguineoCreateInput.setDropdown(true);
        grupoSanguineoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(grupoSanguineoCreateInput);
        
        Message grupoSanguineoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        grupoSanguineoCreateInputMessage.setId("grupoSanguineoCreateInputMessage");
        grupoSanguineoCreateInputMessage.setFor("grupoSanguineoCreateInput");
        grupoSanguineoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(grupoSanguineoCreateInputMessage);
        
        OutputLabel fechaNacimientoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaNacimientoCreateOutput.setFor("fechaNacimientoCreateInput");
        fechaNacimientoCreateOutput.setId("fechaNacimientoCreateOutput");
        fechaNacimientoCreateOutput.setValue("Fecha Nacimiento:");
        htmlPanelGrid.getChildren().add(fechaNacimientoCreateOutput);
        
        Calendar fechaNacimientoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaNacimientoCreateInput.setId("fechaNacimientoCreateInput");
        fechaNacimientoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.fechaNacimiento}", Date.class));
        fechaNacimientoCreateInput.setNavigator(true);
        fechaNacimientoCreateInput.setEffect("slideDown");
        fechaNacimientoCreateInput.setPattern("dd/MM/yyyy");
        fechaNacimientoCreateInput.setRequired(false);
        fechaNacimientoCreateInput.setMaxdate(new Date());
        htmlPanelGrid.getChildren().add(fechaNacimientoCreateInput);
        
        Message fechaNacimientoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaNacimientoCreateInputMessage.setId("fechaNacimientoCreateInputMessage");
        fechaNacimientoCreateInputMessage.setFor("fechaNacimientoCreateInput");
        fechaNacimientoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaNacimientoCreateInputMessage);
        
        OutputLabel mailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        mailCreateOutput.setFor("mailCreateInput");
        mailCreateOutput.setId("mailCreateOutput");
        mailCreateOutput.setValue("Mail:");
        htmlPanelGrid.getChildren().add(mailCreateOutput);
        
        InputText mailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        mailCreateInput.setId("mailCreateInput");
        mailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.mail}", String.class));
        RegexValidator mailCreateInputRegexValidator = new RegexValidator();
        mailCreateInputRegexValidator.setPattern("[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+");
        mailCreateInput.addValidator(mailCreateInputRegexValidator);
        mailCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(mailCreateInput);
        
        Message mailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        mailCreateInputMessage.setId("mailCreateInputMessage");
        mailCreateInputMessage.setFor("mailCreateInput");
        mailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(mailCreateInputMessage);
        
        HtmlOutputText organosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosCreateOutput.setId("organosCreateOutput");
        organosCreateOutput.setValue("Organos:");
        htmlPanelGrid.getChildren().add(organosCreateOutput);
        
        HtmlOutputText organosCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosCreateInput.setId("organosCreateInput");
        organosCreateInput.setValue("This relationship is managed from the Organo side");
        htmlPanelGrid.getChildren().add(organosCreateInput);
        
        Message organosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        organosCreateInputMessage.setId("organosCreateInputMessage");
        organosCreateInputMessage.setFor("organosCreateInput");
        organosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(organosCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreEditOutput.setFor("nombreEditInput");
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMaximum(25);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        OutputLabel grupoSanguineoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        grupoSanguineoEditOutput.setFor("grupoSanguineoEditInput");
        grupoSanguineoEditOutput.setId("grupoSanguineoEditOutput");
        grupoSanguineoEditOutput.setValue("Grupo Sanguineo:");
        htmlPanelGrid.getChildren().add(grupoSanguineoEditOutput);
        
        AutoComplete grupoSanguineoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        grupoSanguineoEditInput.setId("grupoSanguineoEditInput");
        grupoSanguineoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.grupoSanguineo}", GrupoSanguineo.class));
        grupoSanguineoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{donanteBean.completeGrupoSanguineo}", List.class, new Class[] { String.class }));
        grupoSanguineoEditInput.setDropdown(true);
        grupoSanguineoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(grupoSanguineoEditInput);
        
        Message grupoSanguineoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        grupoSanguineoEditInputMessage.setId("grupoSanguineoEditInputMessage");
        grupoSanguineoEditInputMessage.setFor("grupoSanguineoEditInput");
        grupoSanguineoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(grupoSanguineoEditInputMessage);
        
        OutputLabel fechaNacimientoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaNacimientoEditOutput.setFor("fechaNacimientoEditInput");
        fechaNacimientoEditOutput.setId("fechaNacimientoEditOutput");
        fechaNacimientoEditOutput.setValue("Fecha Nacimiento:");
        htmlPanelGrid.getChildren().add(fechaNacimientoEditOutput);
        
        Calendar fechaNacimientoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaNacimientoEditInput.setId("fechaNacimientoEditInput");
        fechaNacimientoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.fechaNacimiento}", Date.class));
        fechaNacimientoEditInput.setNavigator(true);
        fechaNacimientoEditInput.setEffect("slideDown");
        fechaNacimientoEditInput.setPattern("dd/MM/yyyy");
        fechaNacimientoEditInput.setRequired(false);
        fechaNacimientoEditInput.setMaxdate(new Date());
        htmlPanelGrid.getChildren().add(fechaNacimientoEditInput);
        
        Message fechaNacimientoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaNacimientoEditInputMessage.setId("fechaNacimientoEditInputMessage");
        fechaNacimientoEditInputMessage.setFor("fechaNacimientoEditInput");
        fechaNacimientoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaNacimientoEditInputMessage);
        
        OutputLabel mailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        mailEditOutput.setFor("mailEditInput");
        mailEditOutput.setId("mailEditOutput");
        mailEditOutput.setValue("Mail:");
        htmlPanelGrid.getChildren().add(mailEditOutput);
        
        InputText mailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        mailEditInput.setId("mailEditInput");
        mailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.mail}", String.class));
        RegexValidator mailEditInputRegexValidator = new RegexValidator();
        mailEditInputRegexValidator.setPattern("[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+");
        mailEditInput.addValidator(mailEditInputRegexValidator);
        mailEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(mailEditInput);
        
        Message mailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        mailEditInputMessage.setId("mailEditInputMessage");
        mailEditInputMessage.setFor("mailEditInput");
        mailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(mailEditInputMessage);
        
        HtmlOutputText organosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosEditOutput.setId("organosEditOutput");
        organosEditOutput.setValue("Organos:");
        htmlPanelGrid.getChildren().add(organosEditOutput);
        
        HtmlOutputText organosEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosEditInput.setId("organosEditInput");
        organosEditInput.setValue("This relationship is managed from the Organo side");
        htmlPanelGrid.getChildren().add(organosEditInput);
        
        Message organosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        organosEditInputMessage.setId("organosEditInputMessage");
        organosEditInputMessage.setFor("organosEditInput");
        organosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(organosEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText grupoSanguineoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoSanguineoLabel.setId("grupoSanguineoLabel");
        grupoSanguineoLabel.setValue("Grupo Sanguineo:");
        htmlPanelGrid.getChildren().add(grupoSanguineoLabel);
        
        HtmlOutputText grupoSanguineoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        grupoSanguineoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.grupoSanguineo}", String.class));
        htmlPanelGrid.getChildren().add(grupoSanguineoValue);
        
        HtmlOutputText fechaNacimientoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNacimientoLabel.setId("fechaNacimientoLabel");
        fechaNacimientoLabel.setValue("Fecha Nacimiento:");
        htmlPanelGrid.getChildren().add(fechaNacimientoLabel);
        
        HtmlOutputText fechaNacimientoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNacimientoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.fechaNacimiento}", Date.class));
        DateTimeConverter fechaNacimientoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaNacimientoValueConverter.setPattern("dd/MM/yyyy");
        fechaNacimientoValue.setConverter(fechaNacimientoValueConverter);
        htmlPanelGrid.getChildren().add(fechaNacimientoValue);
        
        HtmlOutputText mailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mailLabel.setId("mailLabel");
        mailLabel.setValue("Mail:");
        htmlPanelGrid.getChildren().add(mailLabel);
        
        HtmlOutputText mailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mailValue.setId("mailValue");
        mailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.mail}", String.class));
        htmlPanelGrid.getChildren().add(mailValue);
        
        HtmlOutputText organosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosLabel.setId("organosLabel");
        organosLabel.setValue("Organos:");
        htmlPanelGrid.getChildren().add(organosLabel);
        
        HtmlOutputText organosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosValue.setId("organosValue");
        organosValue.setValue("This relationship is managed from the Organo side");
        htmlPanelGrid.getChildren().add(organosValue);
        
        return htmlPanelGrid;
    }
    
    public Donante DonanteBean.getDonante() {
        if (donante == null) {
            donante = new Donante();
        }
        return donante;
    }
    
    public void DonanteBean.setDonante(Donante donante) {
        this.donante = donante;
    }
    
    public List<GrupoSanguineo> DonanteBean.completeGrupoSanguineo(String query) {
        List<GrupoSanguineo> suggestions = new ArrayList<GrupoSanguineo>();
        for (GrupoSanguineo grupoSanguineo : GrupoSanguineo.values()) {
            if (grupoSanguineo.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(grupoSanguineo);
            }
        }
        return suggestions;
    }
    
    public List<Organo> DonanteBean.getSelectedOrganos() {
        return selectedOrganos;
    }
    
    public void DonanteBean.setSelectedOrganos(List<Organo> selectedOrganos) {
        if (selectedOrganos != null) {
            donante.setOrganos(new HashSet<Organo>(selectedOrganos));
        }
        this.selectedOrganos = selectedOrganos;
    }
    
    public String DonanteBean.onEdit() {
        if (donante != null && donante.getOrganos() != null) {
            selectedOrganos = new ArrayList<Organo>(donante.getOrganos());
        }
        return null;
    }
    
    public boolean DonanteBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DonanteBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DonanteBean.displayList() {
        createDialogVisible = false;
        findAllDonantes();
        return "donante";
    }
    
    public String DonanteBean.displayCreateDialog() {
        donante = new Donante();
        createDialogVisible = true;
        return "donante";
    }
    
    public String DonanteBean.persist() {
        String message = "";
        if (donante.getId() != null) {
            donante.merge();
            message = "message_successfully_updated";
        } else {
            donante.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Donante");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDonantes();
    }
    
    public String DonanteBean.delete() {
        donante.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Donante");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDonantes();
    }
    
    public void DonanteBean.reset() {
        donante = null;
        selectedOrganos = null;
        createDialogVisible = false;
    }
    
    public void DonanteBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
