// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ejercicio.tareas.jsf;

import com.ejercicio.tareas.domain.Materias;
import com.ejercicio.tareas.domain.Tareas;
import com.ejercicio.tareas.jsf.TareasBean;
import com.ejercicio.tareas.jsf.converter.MateriasConverter;
import com.ejercicio.tareas.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TareasBean_Roo_ManagedBean {
    
    declare @type: TareasBean: @ManagedBean(name = "tareasBean");
    
    declare @type: TareasBean: @SessionScoped;
    
    private String TareasBean.name = "Tareases";
    
    private Tareas TareasBean.tareas;
    
    private List<Tareas> TareasBean.allTareases;
    
    private boolean TareasBean.dataVisible = false;
    
    private List<String> TareasBean.columns;
    
    private HtmlPanelGrid TareasBean.createPanelGrid;
    
    private HtmlPanelGrid TareasBean.editPanelGrid;
    
    private HtmlPanelGrid TareasBean.viewPanelGrid;
    
    private boolean TareasBean.createDialogVisible = false;
    
    @PostConstruct
    public void TareasBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("descripcion");
    }
    
    public String TareasBean.getName() {
        return name;
    }
    
    public List<String> TareasBean.getColumns() {
        return columns;
    }
    
    public List<Tareas> TareasBean.getAllTareases() {
        return allTareases;
    }
    
    public void TareasBean.setAllTareases(List<Tareas> allTareases) {
        this.allTareases = allTareases;
    }
    
    public String TareasBean.findAllTareases() {
        allTareases = Tareas.findAllTareases();
        dataVisible = !allTareases.isEmpty();
        return null;
    }
    
    public boolean TareasBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TareasBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TareasBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TareasBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TareasBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TareasBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TareasBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TareasBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TareasBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreCreateOutput.setFor("nombreCreateInput");
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMaximum(25);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        OutputLabel descripcionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionCreateOutput.setFor("descripcionCreateInput");
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputText descripcionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.descripcion}", String.class));
        LengthValidator descripcionCreateInputValidator = new LengthValidator();
        descripcionCreateInputValidator.setMaximum(25);
        descripcionCreateInput.addValidator(descripcionCreateInputValidator);
        descripcionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        OutputLabel materiaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        materiaCreateOutput.setFor("materiaCreateInput");
        materiaCreateOutput.setId("materiaCreateOutput");
        materiaCreateOutput.setValue("Materia:");
        htmlPanelGrid.getChildren().add(materiaCreateOutput);
        
        AutoComplete materiaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        materiaCreateInput.setId("materiaCreateInput");
        materiaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.materia}", Materias.class));
        materiaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareasBean.completeMateria}", List.class, new Class[] { String.class }));
        materiaCreateInput.setDropdown(true);
        materiaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "materia", String.class));
        materiaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{materia.nombre} #{materia.descripcion}", String.class));
        materiaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{materia}", Materias.class));
        materiaCreateInput.setConverter(new MateriasConverter());
        materiaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(materiaCreateInput);
        
        Message materiaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        materiaCreateInputMessage.setId("materiaCreateInputMessage");
        materiaCreateInputMessage.setFor("materiaCreateInput");
        materiaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(materiaCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TareasBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreEditOutput.setFor("nombreEditInput");
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMaximum(25);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        OutputLabel descripcionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionEditOutput.setFor("descripcionEditInput");
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputText descripcionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.descripcion}", String.class));
        LengthValidator descripcionEditInputValidator = new LengthValidator();
        descripcionEditInputValidator.setMaximum(25);
        descripcionEditInput.addValidator(descripcionEditInputValidator);
        descripcionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        OutputLabel materiaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        materiaEditOutput.setFor("materiaEditInput");
        materiaEditOutput.setId("materiaEditOutput");
        materiaEditOutput.setValue("Materia:");
        htmlPanelGrid.getChildren().add(materiaEditOutput);
        
        AutoComplete materiaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        materiaEditInput.setId("materiaEditInput");
        materiaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.materia}", Materias.class));
        materiaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareasBean.completeMateria}", List.class, new Class[] { String.class }));
        materiaEditInput.setDropdown(true);
        materiaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "materia", String.class));
        materiaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{materia.nombre} #{materia.descripcion}", String.class));
        materiaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{materia}", Materias.class));
        materiaEditInput.setConverter(new MateriasConverter());
        materiaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(materiaEditInput);
        
        Message materiaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        materiaEditInputMessage.setId("materiaEditInputMessage");
        materiaEditInputMessage.setFor("materiaEditInput");
        materiaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(materiaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TareasBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        HtmlOutputText descripcionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        HtmlOutputText materiaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        materiaLabel.setId("materiaLabel");
        materiaLabel.setValue("Materia:");
        htmlPanelGrid.getChildren().add(materiaLabel);
        
        HtmlOutputText materiaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        materiaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareasBean.tareas.materia}", Materias.class));
        materiaValue.setConverter(new MateriasConverter());
        htmlPanelGrid.getChildren().add(materiaValue);
        
        return htmlPanelGrid;
    }
    
    public Tareas TareasBean.getTareas() {
        if (tareas == null) {
            tareas = new Tareas();
        }
        return tareas;
    }
    
    public void TareasBean.setTareas(Tareas tareas) {
        this.tareas = tareas;
    }
    
    public List<Materias> TareasBean.completeMateria(String query) {
        List<Materias> suggestions = new ArrayList<Materias>();
        for (Materias materias : Materias.findAllMateriases()) {
            String materiasStr = String.valueOf(materias.getNombre() +  " "  + materias.getDescripcion());
            if (materiasStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(materias);
            }
        }
        return suggestions;
    }
    
    public String TareasBean.onEdit() {
        return null;
    }
    
    public boolean TareasBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TareasBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TareasBean.displayList() {
        createDialogVisible = false;
        findAllTareases();
        return "tareas";
    }
    
    public String TareasBean.displayCreateDialog() {
        tareas = new Tareas();
        createDialogVisible = true;
        return "tareas";
    }
    
    public String TareasBean.persist() {
        String message = "";
        if (tareas.getId() != null) {
            tareas.merge();
            message = "message_successfully_updated";
        } else {
            tareas.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Tareas");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTareases();
    }
    
    public String TareasBean.delete() {
        tareas.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Tareas");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTareases();
    }
    
    public void TareasBean.reset() {
        tareas = null;
        createDialogVisible = false;
    }
    
    public void TareasBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
